// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A instruction, ARegister:
    Not(in=instruction[15], out=AInstruction);            //If instruction[15]=0, AInstruction=1
    And(a=instruction[15], b=true, out=CInstruction);     //If instruction[15]=1, CInstruction=1

    Mux16(a=aluout, b=instruction, sel=AInstruction, out=instrmuxout);
    Or(a=writeAReg, b=AInstruction, out=Aregload);                           //If (write A Register) OR (A instruction is executed) then load A register   
    And(a=CInstruction, b=instruction[5], out=writeAReg);                    //If (Cinstruction) AND (write to A Reg bit is set)
    ARegister(in=instrmuxout, load=Aregload, out=Aregout,  out[0..14]=addressM);
    
    //Data Register:	    
    Mux16(a=Aregout, b=inM, sel=instruction[12], out=datamuxout);

    DRegister(in=aluout, load=writeDReg, out=Dregout);
    And(a=CInstruction, b=instruction[4], out=writeDReg);     //If (CInstruction) AND (write to Data Reg bit is set)

    //ALU
    ALU(
         x=Dregout, 
         y=datamuxout, 
         zx=instruction[11], 
         nx=instruction[10], 
         zy=instruction[9], 
         ny=instruction[8], 
         f=instruction[7], 
         no=instruction[6], 
         out=outM, 
         out=aluout, 
         zr= outZero, 
         ng= outNeg);

    //PC    
    PC(in=Aregout, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc, out[15]=false);
   

    //writeM
    And(a=CInstruction, b=instruction[3], out=writeM);
    
    And(a=instruction[0], b=instruction[1], out=interjmp);
    And(a=interjmp, b=instruction[2], out=uncondjmp);

    Or(a=instruction[0], b=instruction[1], out=internojmp);	
    Or(a=internojmp, b=instruction[2], out=nojmp);
    
    Not(in=outZero, out=notZero);
    Not(in=outNeg, out=notNeg);    

    And(a=notZero, b=notNeg, out=outPos);
    
    And(a=instruction[0], b=outPos, out=jgt);     //out > 0
    And(a=instruction[1], b=outZero, out=jeq);    //out=0
    And(a=instruction[2], b=outNeg, out=jlt);     //out < 0

    Or(a=jgt, b=jeq, out=jge);                   // out >= 0
    Or(a=jlt, b=jeq, out=jle);                   //out <=0
   
    
    And(a=instruction[0], b=instruction[2], out=jneout);
    And(a=jneout, b=notZero, out=jne);          //out not equal to 0

    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=false, in[7]=false, out=condjmp);
     		
    Or(a=condjmp, b=uncondjmp, out=loadPCjmp);
    And(a=loadPCjmp, b=CInstruction, out=loadPC);
    
    Not(in=loadPC, out=incPC);	
    





}